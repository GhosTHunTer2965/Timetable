import express from "express";
import Course from "../models/Course.js";

const router = express.Router();

router.post("/", async (req, res) => {
    try {
        const course = new Course(req.body);
        const saved = await course.save();
        res.status(201).json(saved);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

router.get("/", async (req, res) => {
    res.json(await Course.find());
});

router.get("/:id", async (req, res) => {
    res.json(await Course.findById(req.params.id));
});

router.put("/:id", async (req, res) => {
    res.json(
        await Course.findByIdAndUpdate(req.params.id, req.body, { new: true })
    );
});

router.delete("/:id", async (req, res) => {
    await Course.findByIdAndDelete(req.params.id);
    res.json({ message: "Course deleted" });
});

export default router;

import express from "express";
import Department from "../models/Department.js";

const router = express.Router();

router.post("/", async (req, res) => {
    try {
        const dept = new Department(req.body);
        const saved = await dept.save();
        res.status(201).json(saved);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

router.get("/", async (req, res) => {
    res.json(await Department.find());
});

router.get("/:id", async (req, res) => {
    res.json(await Department.findById(req.params.id));
});

router.put("/:id", async (req, res) => {
    res.json(
        await Department.findByIdAndUpdate(req.params.id, req.body, {
            new: true,
        })
    );
});

router.delete("/:id", async (req, res) => {
    await Department.findByIdAndDelete(req.params.id);
    res.json({ message: "Department deleted" });
});

export default router;

import express from "express";
import Faculty from "../models/Faculty.js";

const router = express.Router();

router.post("/", async (req, res) => {
    try {
        const faculty = new Faculty(req.body);
        const saved = await faculty.save();
        res.status(201).json(saved);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

router.get("/", async (req, res) => {
    res.json(await Faculty.find().populate("department"));
});

router.get("/:id", async (req, res) => {
    res.json(await Faculty.findById(req.params.id).populate("department"));
});

router.put("/:id", async (req, res) => {
    res.json(
        await Faculty.findByIdAndUpdate(req.params.id, req.body, { new: true })
    );
});

router.delete("/:id", async (req, res) => {
    await Faculty.findByIdAndDelete(req.params.id);
    res.json({ message: "Faculty deleted" });
});

export default router;

import express from "express";
import DepartmentCourse from "../models/DepartmentCourse.js";
import DepartmentSemester from "../models/DepartmentSemester.js";

const router = express.Router();

// DeptCourse Routes
router.post("/dept-course", async (req, res) => {
    const entry = new DepartmentCourse(req.body);
    res.status(201).json(await entry.save());
});

router.get("/dept-course", async (req, res) => {
    res.json(await DepartmentCourse.find().populate("department course"));
});

// DeptSemester Routes
router.post("/dept-semester", async (req, res) => {
    const entry = new DepartmentSemester(req.body);
    res.status(201).json(await entry.save());
});

router.get("/dept-semester", async (req, res) => {
    res.json(await DepartmentSemester.find().populate("department semester"));
});

export default router;

import express from "express";
import Room from "../models/Room.js";

const router = express.Router();

router.post("/", async (req, res) => {
    try {
        const room = new Room(req.body);
        const saved = await room.save();
        res.status(201).json(saved);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

router.get("/", async (req, res) => {
    res.json(await Room.find());
});

router.get("/:id", async (req, res) => {
    res.json(await Room.findById(req.params.id));
});

router.put("/:id", async (req, res) => {
    res.json(
        await Room.findByIdAndUpdate(req.params.id, req.body, { new: true })
    );
});

router.delete("/:id", async (req, res) => {
    await Room.findByIdAndDelete(req.params.id);
    res.json({ message: "Room deleted" });
});

export default router;

import express from "express";
import Semester from "../models/Semester.js";

const router = express.Router();

router.post("/", async (req, res) => {
    try {
        const sem = new Semester(req.body);
        const saved = await sem.save();
        res.status(201).json(saved);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

router.get("/", async (req, res) => {
    res.json(await Semester.find());
});

router.get("/:id", async (req, res) => {
    res.json(await Semester.findById(req.params.id));
});

router.put("/:id", async (req, res) => {
    res.json(
        await Semester.findByIdAndUpdate(req.params.id, req.body, { new: true })
    );
});

router.delete("/:id", async (req, res) => {
    await Semester.findByIdAndDelete(req.params.id);
    res.json({ message: "Semester deleted" });
});

export default router;

import express from "express";
import User from "../models/User.js";

const router = express.Router();

router.post("/", async (req, res) => {
    try {
        const user = new User(req.body);
        const saved = await user.save();
        res.status(201).json(saved);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

router.get("/", async (req, res) => {
    res.json(await User.find());
});

router.get("/:id", async (req, res) => {
    res.json(await User.findById(req.params.id));
});

router.put("/:id", async (req, res) => {
    res.json(
        await User.findByIdAndUpdate(req.params.id, req.body, { new: true })
    );
});

router.delete("/:id", async (req, res) => {
    await User.findByIdAndDelete(req.params.id);
    res.json({ message: "User deleted" });
});

export default router;

